Usage of the program
====================

    ENorm.exe <input file> <output file> [parameter file]

      input file: Contains the email message to normalize.

      output file: The normalized text will be saved here.

      parameter file: If given, contains various settings influencing normalization.
                      See description below.

Input format
------------

    ENorm accepts two kinds of input:

    1. A complete email in "raw" MIME format as specified in RFC #822#.
       Example:

            Return-Path: <cyrus@victoria.mindmaker.hu>
            X-Sieve: cmu-sieve 2.0
            Return-Path: <bkodaj@mindmaker.hu>
            Received: by portal2.mindmaker.hu (Postfix, from userid 501)
	            id 7DDCA6A418; Thu,  3 May 2001 17:36:01 +0200 (CEST)
            From: "Bence Kodaj" <bkodaj@mindmaker.hu>
            To: <bkodaj@mindmaker.hu>
            Cc: <kodaj@freemail.hu>
            Subject: Test email
            Date: Thu, 3 May 2001 17:35:52 +0200
            Message-ID: <001501c0d3e6$bc7f1dc0$8501a8c0@bkodaj>
            MIME-Version: 1.0
            Content-Type: text/plain;
	            charset="iso-8859-1"
            Content-Transfer-Encoding: 7bit
            X-Priority: 3 (Normal)
            X-MSMail-Priority: Normal
            X-Mailer: Microsoft Outlook 8.5, Build 4.71.2173.0
            X-MimeOLE: Produced By Microsoft MimeOLE V5.50.4133.2400
            Importance: Normal
            X-Virus-Scanned: by AMaViS perl-11

            Hi,

            This is the body of the email.
            > This is a quote.

            Bye,
            Ben


    2. Only the body of the email in plain text format.
       Example:

            Hi,

            This is the body of the email.
            > This is a quote.

            Bye,
            Ben


    ENorm automatically recognizes which kind of input was given to it and it
    handles the input file accordingly.


Structure of the parameter file
-------------------------------

    The optional parameter file is a text file that contains a parameter name - parameter
    value pair in every non-empty line. The parameter name and the parameter value can be
    separated by any whitespace characters. Names and values are interpreted in a
    case-insensitive way.

    The allowed parameter names, their meaning, and the possible values are listed below.
    A more detailed explanation is given in section 4.

    Parameter           Possible values     Default     Effect
    name                                    value
    -----------------------------------------------------------------------------------------

    reader              Julie, Ben, ...     Ben         Set voice of the reader.
                        (any of the
                        installed voices)

    quote_reader        Julie, Ben, ...     Tom         Set voice of the quote reader.
                        (any of the
                        installed voices)

    narrator            Julie, Ben, ...     Julie       Set voice of the narrator.
                        (any of the
                        installed voices)

    narration           yes / no            yes         If 'no', narration is switched off 							completely.

    from_field          yes / no            yes         Read out the "From:" field of the 							message
                                                        header if "yes".

    to_field            yes / no            no          Read out the "To:" field of the message
                                                        header if "yes".

    cc_field            yes / no            yes         Read out the "Cc:" field of the message
                                                        header if "yes".

    subject_field       yes / no            yes         Read out the "Subject:" field of the message
                                                        header if "yes".

    embedded_header     yes / no            yes         Read out email headers contained in the
                                                        message body if "yes".

    signature           yes / no            yes         Read out email signatures if "yes".

    quote_depth         0,1,2,...           8           Multiple quoted parts whose quote level is greater
                        (any non-negative               than this number are not read out.
                        integer)                        (I.e., those parts that have more than quote_depth
                                                        >'s or |'s at the beginning of their lines.)

    attachment_names    yes / no            yes         Read out attachment names if "yes".

    textual_attachment  yes / no            no          Read out the content of textual attachments if "yes".

    email_attachment    yes / no            no          Read out the content of attached email messages if "yes".


Normalization algorithm
=======================

    The algorithm works as follows:
    1. It identifies the main parts of the email:
       * Header
       * Message body
       * Attachments

       (If the input is a "bare" message body, this step is skipped.)

    2. It further fragments the message body into various functional parts like
       * Content text
       * Quote
       * Smiley
       ..etc. See a more detailed description below.

    The intelligibility of the email is further improved by allowing the user to have
    different parts of the email read out by different speakers:

       * The 'narrator' is the person who reads out "metainformation" related to the email.
         E.g., he/she reads out header fields, he/she announces the beginning and the end
         of quotes in the message body, etc.

       * The 'reader' corresponds to the sender of the message. He/she reads out the
         actual content of the message body.

       * The 'quote reader' is the person who reads out quoted parts of the message body.
         Such parts probably belonged to a previous message that was replied to or forwarded.
         The quote reader corresponds to the author of that previous message.

    The various functional parts and their normalization are described below.
    Note: the sections dealing with headers and attachments are relevant only if the input
    is in MIME format.


Header
------

    The header fields that are identified and read out are listed below. All fields are
    read out by the narrator; if narration is switched off, they are read out by the reader.
    We append a space and a full stop (to improve the intonation) to the end of each field.

"From" field
------------

    This is read out as follows: "The sender of the message is ...".

"To" field
----------

    This is read out as follows: "The recipient of the message is ...".

"Subject" field
---------------

    This is read out as follows: "The subject of the message is ...".
    If the field is empty, we say that "The message has no subject."

    If the field begins with "Re: " or "RE: ", then that is replaced with "Ree: " in order
    to ensure correct pronunciation. Similarly, "Fw: ", "FW: ", 'Fwd: " and "FWD: " at the
    beginning is replaced with "Forward: " in order to improve intelligibility.
    Multiple occurrences of "Re" or "Fw"/"Fwd" are handled too. The replacement stops at
    the first position where neither "Re" nor "Fw"/"Fwd" is found. For example,
    "Re: Fw: Something Fw: X" becomes "Ree: Forward: Something Fw: X".

"Cc" field
----------

    This is read out as follows: "The Cc recipients of the message are ...".
    If the field is empty, we don't say anything.



Message body
------------

    The following functional parts are identified within the message body:

Embedded header
---------------

    Represents an email header (with From, To, etc. fields) that is  _within_ the message
    body. (Most probably as part of a previous message that was replied to or forwarded.)

    Example:

    -----Original Message-----
    From: Developer.com Update [mailto:listsupport@internet.com]
    Sent: Saturday, March 24, 2001 12:05 AM
    To: szelo@MINDMAKER.COM
    Subject: Derivative Works

    Normalization: embedded headers are read out by the narrator. We append a space and a
    full stop (to improve the intonation) to the end of each line of the header.
    At the end of the header, there is a 300 msec pause in order to separate the header
    from the content text. If narration is switched off, the header is read out by the
    reader (unless, of course, headers are explicitly disabled with 'embedded_header no').

    The line beginning with "Subject: " is handled in the same way as the subject field
    of a non-embedded email header (see 4.1.3).


Content text
------------

    Represents the actual content of the message, i.e., those parts that contain what
    the sender wants to say to the recipient.
    Note: does not include quotes from previous messages.

    Example:

    Hi,

    Thanks for your reply, but I probably should have marked the question OT.
    After running the custom apwizard, I am left in an MFC environment and
    CComPtr<> does not appear to be available. Basically, my question was - how
    can I know for sure if get_Configurations() is or is not calling AddRef()
    for me before giving the pointer ?

    thanks
    Phil.

    Normalization: content text is read out by the reader. We append a full stop and a
    pause of 200 msec to the end of each paragraph. (Paragraphs are to be understood as
    contiguous blocks of non-empty lines, separated by one or more empty lines or
    by one or more separator lines. )


Quote
-----

    Represents a contiguous quoted part of an email. It was probably part of a previous
    message that was replied to or forwarded.
    Note: quotes are identified by detecting '>' or '|' characters at the beginning of
    the lines.
    Example:

    > Hi, good morning!
    >
    > The problem was related to the data files, one of them was not compatible
    > with the compiled code.
    > The information you had sent was enough, the most important was the input
    > text and the used speaker.
    >
    > John

    Normalization: Quotes are introduced by the narrator saying "Message level <n>". Here,
    <n> means the 'level' of the quote to follow. (This is simply the number of >'s or |'s
    at the beginning of the lines of the quoted part.) When we return from a quote (or from
    multiple quotes) to the original message, the narrator says "Return to original message."
    These announcements are given only if the quote level has actually changed between two
    body elements.

    Odd-level quotes are read out by the quote reader, and even-level quotes are read out
    by the reader. This solution helps the listener to better separate quoted parts from
    non-quoted parts and different levels of quotes from each other.
    (The rationale behind this two-speaker solution is that multiple quoted parts are often
    the result of a message "bouncing" back and forth several times between two persons.)


Smiley
------

    Represents the well-known character sequences intended to express emotions, gestures,
    etc.

    Normalization: smileys are read out by the narrator (or, if narration is switched off,
    by the reader). Smileys are grouped into 3 types: happy, sad, and winking. Based on
    the actual smiley's type, the smiley is replaced by the text "happy/sad/winking smiley".
    There is a pause of 100 msec before and after the smiley.
    The recognized smileys and their types are the following:

    Happy smileys:
        :-)    B-)
        :->    8-)
        :-D    :-))
        :-X    %-)
        (-:

    Winking smileys:
        ;-)
        ;-))
        ,-)
        ,-))

    Sad smileys:
        :-(
        :-((
        )-:
        B-(
        8-(
		%-(

Separator line
--------------

    Represents a character sequence like
        ---------------------------------------
    intended to separate different parts of an email.
    Might contain text as well, e.g.:
        ------> LORD OF THE DANCE & RIVERDANCE MUSIC on ONE CD <------

    Normalization: Separator lines are read out by the narrator in the following way:
    - non-textual separator lines like this
      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      are read out as "Separator line.".

    - separator lines containing text like this
      ------> LORD OF THE DANCE & RIVERDANCE MUSIC on ONE CD <------
      are read out as "Separator line containing text LORD OF THE DANCE etc."

    If narration is switched off, two pauses of 200 msec each are inserted before
    and after the separator line, and if the separator line contains any text, that
    is read out by the reader.


Signature
---------

    Represents the extended signature of the sender of the message.
    Such signatures usually contain more than a name (e.g., email address,
    telephone/fax number, www page, etc.) and are inserted automatically
    at the end of emails.
    Example:

    ------------------------------------------------------------
    Bernhard Beck                      EMail bbeck@mindmaker.com
    Mindmaker, Inc.                      Tel 408-467-9219
    224 Airport Parkway, Suite 550       Fax 408-467-9202
    San Jose, CA 95110
    This message is built from 100% recycled and happy electrons

    Normalization: signatures are read out by the reader. We append a space and a full stop
    (to improve the intonation) to the end of each line of the signature. At the end of
    the signature, there is a 300 msec pause. (In order to separate the signature from
    subsequent text, e.g., if the signature is within a quoted part.)


Attachments
-----------

    There are three different types of attachments; see list below.

    Normalization: general information related to attachments is read out by the narrator
    (or, if narration is switched off, by the reader). If the email message contains any
    attachments, then we always say how many attachments there are. Then each attachment is
    normalized in turn. See details below.

Binary attachment
-----------------

    Represents a binary file attached to the email. (NB: Word documents probably
    belong in this category, is spite of their textual "nature").

    Normalization:
      * If "attachment_names" is set to "yes" in the parameter file, then we say that
        "The message contains a binary attachment named ...".
      * The file's content, of course, cannot be read out.

Textual attachment
------------------

    Represents a plain text file attached to the email.

    Normalization:
      * If "attachment_names" is set to "yes" in the parameter file, then we say that
        "The message contains a textual attachment named ...".
      * If "textual_attachment" is set to "yes" in the parameter file, then the reader
        reads out the content of the text file, with the narrator saying
        "The textual attachment reads as follows." at the beginning and
        "End of textual attachment." at the end.

Attached email
--------------

    Represents a previous email message inserted as a whole into the current message.
    (NB: not to be confused with forwarded or replied-to messages. Attached emails are
    created exactly like other attachment types, and they typically don't appear in the
    message body in email client programs.)

    Normalization:
      * If "attachment_names" is set to "yes" in the parameter file, then we say that
        "The message contains an attached email message".
      * If "email_attachment" is set to "yes" in the parameter file, then the reader
        reads out the attached email, with the narrator saying
        "The attached email message reads as follows. " at the beginning and
        "End of attached email message." at the end.

    Important note: attached emails are normalized with the same parameter settings as
    their "parent" email. This might lead to a recursive effect: if you set the parameter
    "email_attachment" to "yes", then all attached emails will be read out, and all emails
    attached to those emails will be read out too, etc.
